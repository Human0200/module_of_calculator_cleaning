<?php

use Bitrix\Main\Mail\Mail;
use Bitrix\Main\Loader;
use LeadSpace\TBank\TBankAPIClient;

if (!defined("B_PROLOG_INCLUDED") || B_PROLOG_INCLUDED !== true)
  die();

class CBPGetPaymentStatusActivity extends CBPActivity
{
  public function __construct($name)
  {
    parent::__construct($name);
    $this->arProperties = [
      "Title" => "",
      "DocumentId" => "",            // ID –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
      "TBankToken" => "",            // –¢–æ–∫–µ–Ω T-Bank API
      "IsSandbox" => "Y",            // –†–µ–∂–∏–º sandbox (Y/N)
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
      "PaymentStatus" => "",         // –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ (EXECUTED, PENDING, ERROR –∏ —Ç.–¥.)
    ];
  }

  public function Execute()
  {
    try {
      if (!Loader::includeModule('main')) {
        throw new Exception("–ú–æ–¥—É–ª—å 'main' –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.");
      }
      if (!\class_exists('\Bitrix\Main\Web\HttpClient')) {
        throw new Exception("–ö–ª–∞—Å—Å HttpClient –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±–Ω–æ–≤–∏—Ç–µ –ë–∏—Ç—Ä–∏–∫—Å –¥–æ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏.");
      }

      // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
      $documentId = $this->DocumentId;
      $tbankToken = trim($this->TBankToken);
      $isSandbox = ($this->IsSandbox === 'Y');

     // $this->WriteToTrackingService("–†–µ–∂–∏–º sandbox: " . ($isSandbox ? '–î–∞' : '–ù–µ—Ç'));

      // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
      if (empty($documentId)) {
        throw new Exception("–ù–µ —É–∫–∞–∑–∞–Ω ID –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞");
      }
      if (empty($tbankToken)) {
        throw new Exception("–ù–µ —É–∫–∞–∑–∞–Ω —Ç–æ–∫–µ–Ω T-Bank API");
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç UUID
      if (!preg_match('/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i', $documentId)) {
        throw new Exception("ID –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ UUID: " . $documentId);
      }

      //$this->WriteToTrackingService("ID –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: " . $documentId);

      Loader::includeModule('leadspace.cleaning.calculator');
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç T-Bank API
      $client = new TBankAPIClient($tbankToken, $isSandbox);
      //$this->WriteToTrackingService("T-Bank API –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");

      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã –ø–ª–∞—Ç–µ–∂–µ–π
      $result = $client->getPaymentStatus([$documentId]);

      //$this->WriteToTrackingService("–û—Ç–≤–µ—Ç API - HTTP –∫–æ–¥: " . $result['http_code']);
     // $this->WriteToTrackingService("–û—Ç–≤–µ—Ç API - –¥–∞–Ω–Ω—ã–µ: " . json_encode($result['data'], JSON_UNESCAPED_UNICODE));

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      if ($result['http_code'] == 200) {
       // $this->WriteToTrackingService("‚úì –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ!");

        $responseData = $result['data'];
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        $this->PaymentStatus = "UNKNOWN";
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if (isset($responseData['result']) && is_array($responseData['result']) && count($responseData['result']) > 0) {
          $payment = $responseData['result'][0]; // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
          
          $this->PaymentStatus = $payment['status'];
         $this->WriteToTrackingService("‚úì –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ {$documentId}: " . $this->PaymentStatus);
          
          if (isset($payment['comment'])) {
            $this->WriteToTrackingService("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: " . $payment['comment']);
          }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—à–∏–±–∫–∏
        if (isset($responseData['resultError']) && is_array($responseData['resultError']) && count($responseData['resultError']) > 0) {
          $error = $responseData['resultError'][0]; // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –æ—à–∏–±–∫—É
          
          $this->PaymentStatus = 'ERROR';
          $this->WriteToTrackingService("‚úó –û—à–∏–±–∫–∞ –¥–ª—è {$documentId}: {$error['errorCode']} - {$error['errorMessage']}");
        }

        // –ü—Ä–æ—Å—Ç–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
       // $this->WriteToTrackingService("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: –°—Ç–∞—Ç—É—Å = " . $this->PaymentStatus);

        return CBPActivityExecutionStatus::Closed;
      } else {
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ API
        $errorMessage = "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–µ–π. HTTP –∫–æ–¥: " . $result['http_code'];

        if (isset($result['data']['error'])) {
          $errorMessage .= ". –û—à–∏–±–∫–∞: " . $result['data']['error'];
        }

        if (isset($result['data']['errorMessage'])) {
          $errorMessage .= ". –°–æ–æ–±—â–µ–Ω–∏–µ: " . $result['data']['errorMessage'];
        }

        $this->WriteToTrackingService("‚úó " . $errorMessage);
        $this->WriteToTrackingService("–ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç API: " . $result['raw_response']);

        throw new Exception($errorMessage);
      }
    } catch (Exception $e) {
      $this->WriteToTrackingService("–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–∏—Ç–∏: " . $e->getMessage());
      throw $e;
    }
  }

  public static function ValidateProperties($arTestProperties = [], CBPWorkflowTemplateUser $user = null)
  {
    $errors = [];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    if (empty($arTestProperties['DocumentId'])) {
      $errors[] = ["code" => "NotExist", "message" => "–ù–µ —É–∫–∞–∑–∞–Ω ID –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞"];
    }
    
    if (empty($arTestProperties['TBankToken'])) {
      $errors[] = ["code" => "NotExist", "message" => "–ù–µ —É–∫–∞–∑–∞–Ω —Ç–æ–∫–µ–Ω T-Bank API"];
    }

    return array_merge($errors, parent::ValidateProperties($arTestProperties, $user));
  }

  public static function GetPropertiesDialog($documentType, $activityName, $arWorkflowTemplate, $arWorkflowParameters, $arWorkflowVariables, $arCurrentValues, $formName = "")
  {
    $runtime = CBPRuntime::GetRuntime();

    $arMap = [
      "DocumentId" => "document_ids",
      "TBankToken" => "tbank_token",
      "IsSandbox" => "is_sandbox",
    ];

    // –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è –µ—â—ë –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã, –∏–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ —Ç–µ–∫—É—â–∏—Ö —Å–≤–æ–π—Å—Ç–≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    if (!is_array($arCurrentValues)) {
      $arCurrentValues = [];
      $arCurrentActivity = &CBPWorkflowTemplateLoader::FindActivityByName($arWorkflowTemplate, $activityName);
      if (is_array($arCurrentActivity["Properties"])) {
        foreach ($arMap as $propertyKey => $fieldName) {
          $arCurrentValues[$fieldName] = $arCurrentActivity["Properties"][$propertyKey] ?? "";
        }
      }
    }

    return $runtime->ExecuteResourceFile(__FILE__, "properties_dialog.php", ["arCurrentValues" => $arCurrentValues]);
  }

  public static function GetPropertiesDialogValues($documentType, $activityName, &$arWorkflowTemplate, &$arWorkflowParameters, &$arWorkflowVariables, $arCurrentValues, &$arErrors)
  {
    $arErrors = [];

    $arMap = [
      'DocumentId' => 'document_ids',
      'TBankToken' => 'tbank_token',
      'IsSandbox' => 'is_sandbox',
    ];

    $arProperties = [];
    foreach ($arMap as $key => $value) {
      $arProperties[$key] = $arCurrentValues[$value] ?? "";
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if (empty($arProperties['IsSandbox'])) {
      $arProperties['IsSandbox'] = 'Y';
    }

    $arErrors = self::ValidateProperties($arProperties);
    if (!empty($arErrors)) {
      return false;
    }

    $arCurrentActivity = &CBPWorkflowTemplateLoader::FindActivityByName($arWorkflowTemplate, $activityName);
    $arCurrentActivity["Properties"] = $arProperties;

    return true;
  }
}